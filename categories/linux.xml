<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Povilas Blog (Posts about linux)</title><link>http://blog.povilasb.com/</link><description></description><atom:link href="http://blog.povilasb.com/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 11 Dec 2022 18:28:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Linux network routing table</title><link>http://blog.povilasb.com/posts/linux-network-routing-table/</link><dc:creator>Povilas Balciunas</dc:creator><description>&lt;p&gt;Our computers can have multiple network devices: Ethernet, WiFi cards,
virtual network devices, etc.
On Linux when the network packets arrive to one of these devices, these
packets are handled by device drivers and then put to networking stack.
Then packets are dispatched to appropriate application to handle.&lt;/p&gt;
&lt;p&gt;When the packets are sent, they are put to networking stack, e.g. via
BSD sockets API.
Then Linux networking stack uses a routing table to decide which network
interface the packet will be sent to.&lt;/p&gt;
&lt;p&gt;Routing table can be viewed with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.1.1     0.0.0.0         UG    600    0        0 wlp3s0
0.0.0.0         0.0.0.0         0.0.0.0         U     1002   0        0 enp0s25
10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 tun0
192.168.1.0     0.0.0.0         255.255.255.0   U     600    0        0 wlp3s0&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ip route show
default via 192.168.1.1 dev wlp3s0 proto static metric 600
default dev enp0s25 scope link metric 1002 linkdown
10.0.0.0/24 dev tun0 proto kernel scope link src 10.0.0.1
192.168.1.0/24 dev wlp3s0 proto kernel scope link src 192.168.1.125 metric 600&lt;/pre&gt;
&lt;p&gt;Although &lt;cite&gt;route&lt;/cite&gt; command is deprecated &lt;a class="footnote-reference brackets" href="http://blog.povilasb.com/posts/linux-network-routing-table/#f1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, I still prefer it because of
nicer output.&lt;/p&gt;
&lt;section id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Let's take the output of &lt;cite&gt;route -n&lt;/cite&gt;.
Now what happens when we execute &lt;cite&gt;ping 8.8.8.8&lt;/cite&gt;?&lt;/p&gt;
&lt;p&gt;Well, Linux kernel&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;matches address &lt;cite&gt;8.8.8.8&lt;/cite&gt; with &lt;cite&gt;0.0.0.0&lt;/cite&gt; (all addresses),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;selects route with the lowest &lt;cite&gt;Metric&lt;/cite&gt; (600) because there are multiple
routes to &lt;cite&gt;0.0.0.0&lt;/cite&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;looks up the gateway which is &lt;cite&gt;192.168.1.1&lt;/cite&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;matches gateway address with &lt;cite&gt;192.168.1.0&lt;/cite&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;looks up that destination &lt;cite&gt;192.168.1.0&lt;/cite&gt; does not have gateway meaning
that the network is directly connected somehow,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;does NAT (network address translation),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;writes packet to &lt;cite&gt;wlp3s0&lt;/cite&gt; interface,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;device driver sends packet to WiFi card.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="understanding-routing-table"&gt;
&lt;h2&gt;Understanding routing table&lt;/h2&gt;
&lt;p&gt;Again, let's look at &lt;cite&gt;route -n&lt;/cite&gt; output.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Genmask&lt;/cite&gt; column is a mask applied (bitwise AND) to IP packet destination
address.
After &lt;cite&gt;Genmask&lt;/cite&gt; is applied, &lt;cite&gt;Destination&lt;/cite&gt; column is used to match packet
destination.
If the matched destination has &lt;cite&gt;Gateway&lt;/cite&gt;, packet is forwarded there,
otherwise it's written to network interface described by column &lt;cite&gt;Iface&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;When packet destination address matches with multiple &lt;cite&gt;Destination&lt;/cite&gt; entries,
the one with the longest prefix wins.
For example address &lt;cite&gt;192.168.1.100&lt;/cite&gt; matches &lt;cite&gt;0.0.0.0/0&lt;/cite&gt; and &lt;cite&gt;192.168.1.0/24&lt;/cite&gt;.
But &lt;cite&gt;192.168.1.0&lt;/cite&gt; prefix is 24 bits long, so this rule takes priority.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Flags&lt;/cite&gt; column holds some metainfo about routes: &lt;cite&gt;U&lt;/cite&gt; - route is up, &lt;cite&gt;G&lt;/cite&gt; route
has gateway.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Metric&lt;/cite&gt; column is used to determine priority when multiple routes match
packet destination address.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Ref&lt;/cite&gt; column is not used in Linux kernel.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="manipulating-routing-table"&gt;
&lt;h2&gt;Manipulating routing table&lt;/h2&gt;
&lt;p&gt;We can use &lt;cite&gt;ip&lt;/cite&gt; command to add, delete, modify routes.
E.g. we can redirect packets to desired network interfaces:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ip route add 8.8.8.8 via 10.0.0.2&lt;/pre&gt;
&lt;p&gt;This makes all packets with destination &lt;cite&gt;8.8.8.8&lt;/cite&gt; be written to
&lt;a class="reference external" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/"&gt;tun0 interface&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To delete route issue command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ip route del 8.8.8.8 via 10.0.0.2&lt;/pre&gt;
&lt;p&gt;We can test which &lt;cite&gt;Destination&lt;/cite&gt; entry will be matched for given address:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ip route get 10.0.0.2
10.0.0.2 dev tun0 src 10.0.0.1

$ ip route get 8.8.8.8
8.8.8.8 via 192.168.1.1 dev wlp3s0 src 192.168.1.125

$ ip route get 192.168.1.100
192.168.1.100 dev wlp3s0 src 192.168.1.125&lt;/pre&gt;
&lt;p&gt;The difference between the last two routes is that NAT will be executed
for packets destined to &lt;cite&gt;8.8.8.8&lt;/cite&gt;, while packets with destination
&lt;cite&gt;192.168.1.100&lt;/cite&gt; will remain intact.&lt;/p&gt;
&lt;p&gt;We can change the route metric by adding new route with different metric
and then deleting the old one:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ip route add default via 192.168.1.1 dev wlp3s0 proto static metric 500
# ip route del default via 192.168.1.1 dev wlp3s0 proto static metric 600&lt;/pre&gt;
&lt;p class="rubric"&gt;References&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="f1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="http://blog.povilasb.com/posts/linux-network-routing-table/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="http://xmodulo.com/linux-tcpip-networking-net-tools-iproute2.html"&gt;http://xmodulo.com/linux-tcpip-networking-net-tools-iproute2.html&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.cyberciti.biz/faq/what-is-a-routing-table/"&gt;https://www.cyberciti.biz/faq/what-is-a-routing-table/&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>linux</category><category>networking</category><guid>http://blog.povilasb.com/posts/linux-network-routing-table/</guid><pubDate>Mon, 28 Aug 2017 13:35:53 GMT</pubDate></item><item><title>Linux virtual network devices</title><link>http://blog.povilasb.com/posts/linux-virtual-network-devices/</link><dc:creator>Povilas Balciunas</dc:creator><description>&lt;p&gt;Linux allows us to create virtual network devices and control them
programmaticaly. We can read and produce raw IP or Ethernet packets.
Such devices are called TUN or TAP and often referred to as TUN/TAP.
TUN device is used to manipulate IP packets, TAP - Ethernet &lt;a class="footnote-reference brackets" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#f1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TUN/TAP has a lot of uses: we can inspect, modify, generate, etc. network
packets. OpenVPN uses TUN/TAP to route all packets through proxy server.
Thus we can use TUN/TAP to create misc VPN services, e.g. IP over DNS &lt;a class="footnote-reference brackets" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#f2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;
&lt;a class="footnote-reference brackets" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#f3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;section id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;pre class="literal-block"&gt;+------+              +------------+          +------+
| eth0 |  &amp;lt;--------&amp;gt;  | Networking | &amp;lt;------&amp;gt; | tun0 |
+------+              |    stack   |          +------+
                      +------------+             ^
                                                 |
                                                 |
                                                 V
                                          +-------------+
                                          | Application |
                                          +-------------+&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;tun0&lt;/cite&gt; is virtual network device interface. It acts just like a regular
interface. Except we can hook to it and control it from userspace application.&lt;/p&gt;
&lt;p&gt;When application writes packets to &lt;cite&gt;tun0&lt;/cite&gt;, they will be put to networking
stack and treated as if they came from a regular NIC.
When packets arrive to networking stack with destination address that is
routed to &lt;cite&gt;tun0&lt;/cite&gt;, they will be forwarded to userspace application.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="create-tun-device-from-cli"&gt;
&lt;h2&gt;Create TUN device from CLI&lt;/h2&gt;
&lt;p&gt;We can use &lt;cite&gt;ip&lt;/cite&gt; CLI command to setup the TUN device:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# ip tuntap add mode tun tun0
# ip addr add 10.0.0.1/24 dev tun0
# ip link set tun0 up&lt;/pre&gt;
&lt;p&gt;Then the resulting routing table looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.1     0.0.0.0         UG    600    0        0 wlp3s0
10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 tun0&lt;/pre&gt;
&lt;p&gt;Which means that the packets with destination &lt;cite&gt;10.0.0.X&lt;/cite&gt; will be forwarded
to &lt;cite&gt;tun0&lt;/cite&gt; interface.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="create-tun-device-with-python"&gt;
&lt;h2&gt;Create TUN device with Python&lt;/h2&gt;
&lt;p&gt;The syscalls used by &lt;cite&gt;ip tuntap&lt;/cite&gt; command might be called programmatically from
any language including Python.
To create TUN device we need to open &lt;cite&gt;/dev/net/tun&lt;/cite&gt; and call &lt;a class="reference external" href="https://docs.python.org/3/library/fcntl.html#fcntl.ioctl"&gt;ioctl()&lt;/a&gt; with specific
parameters:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-1" name="rest_code_f394665351d4429b8efa6186a10d9d16-1" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-2" name="rest_code_f394665351d4429b8efa6186a10d9d16-2" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fcntl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ioctl&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-3" name="rest_code_f394665351d4429b8efa6186a10d9d16-3" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-4" name="rest_code_f394665351d4429b8efa6186a10d9d16-4" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-5" name="rest_code_f394665351d4429b8efa6186a10d9d16-5" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;TUNSETIFF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x400454ca&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-6" name="rest_code_f394665351d4429b8efa6186a10d9d16-6" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;IFF_TUN&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0001&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-7" name="rest_code_f394665351d4429b8efa6186a10d9d16-7" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;IFF_NO_PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1000&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-8" name="rest_code_f394665351d4429b8efa6186a10d9d16-8" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-9" name="rest_code_f394665351d4429b8efa6186a10d9d16-9" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;ftun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/dev/net/tun"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f394665351d4429b8efa6186a10d9d16-10" name="rest_code_f394665351d4429b8efa6186a10d9d16-10" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_f394665351d4429b8efa6186a10d9d16-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TUNSETIFF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"16sH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;"tun0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IFF_TUN&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IFF_NO_PI&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this is pretty low level and suits my learning needs very well.
Although, we can definitely find some python libraries for this &lt;a class="footnote-reference brackets" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#f5" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;5&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; &lt;a class="footnote-reference brackets" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#f6" id="footnote-reference-5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;6&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, we can programmatically set up routes using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Netlink"&gt;Netlink&lt;/a&gt; based protocols.
Fortunately there's a python package &lt;a class="reference external" href="https://pypi.python.org/pypi/pyroute2"&gt;pyroute2&lt;/a&gt; implementing Netlink.
For example we can assign an IP address to TUN interface and bring up:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-1" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-1" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# pip install pyroute2==0.4.19&lt;/span&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-2" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-2" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyroute2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IPRoute&lt;/span&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-3" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-3" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-4" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-4" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IPRoute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-5" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-5" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link_lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ifname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'tun0'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-6" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-6" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'10.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefixlen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-7" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-7" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'set'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'up'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9a388a58603f4de69a63c2da77ef3b64-8" name="rest_code_9a388a58603f4de69a63c2da77ef3b64-8" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9a388a58603f4de69a63c2da77ef3b64-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="controlling-tun-tap-device"&gt;
&lt;h2&gt;Controlling TUN/TAP device&lt;/h2&gt;
&lt;p&gt;Once we have created and enabled &lt;cite&gt;tun0&lt;/cite&gt; interface we can receive and send
raw IP or Ethernet packets, respectively.&lt;/p&gt;
&lt;section id="receiving-packets"&gt;
&lt;h3&gt;Receiving packets&lt;/h3&gt;
&lt;p&gt;Let's start sending ICMP requests to &lt;cite&gt;10.0.0.4&lt;/cite&gt; which gets routed to our
TUN device:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.0.1     0.0.0.0         UG    600    0        0 wlp3s0
10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 tun0
192.168.0.0     0.0.0.0         255.255.255.0   U     600    0        0 wlp3s0

$ ping 10.0.0.4&lt;/pre&gt;
&lt;p&gt;Then we can receive those packets with a simple read:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_25edf3f069ce494a89fa3d6c32920f82-1" name="rest_code_25edf3f069ce494a89fa3d6c32920f82-1" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_25edf3f069ce494a89fa3d6c32920f82-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a id="rest_code_25edf3f069ce494a89fa3d6c32920f82-2" name="rest_code_25edf3f069ce494a89fa3d6c32920f82-2" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_25edf3f069ce494a89fa3d6c32920f82-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_25edf3f069ce494a89fa3d6c32920f82-3" name="rest_code_25edf3f069ce494a89fa3d6c32920f82-3" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_25edf3f069ce494a89fa3d6c32920f82-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_25edf3f069ce494a89fa3d6c32920f82-4" name="rest_code_25edf3f069ce494a89fa3d6c32920f82-4" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_25edf3f069ce494a89fa3d6c32920f82-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;raw_packet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# we get ftun descriptor by opening /dev/net/tun&lt;/span&gt;
&lt;a id="rest_code_25edf3f069ce494a89fa3d6c32920f82-5" name="rest_code_25edf3f069ce494a89fa3d6c32920f82-5" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_25edf3f069ce494a89fa3d6c32920f82-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_packet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output is something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;b'E\x00\x00T\xef]@\x00@\x017G\n\x00\x00\x01\n\x00\x00\x04\x08\x00M\xef%\xc2\x00\x05As\x9dY\x00\x00\x00\x00\xe1\xa9\x05\x00\x00\x00\x00\x00\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&amp;amp;\'()*+,-./01234567&lt;/pre&gt;
&lt;p&gt;which is a raw IP packet with ICMP packet as data.&lt;/p&gt;
&lt;p&gt;By the way, seems like Linux kernel is sending &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol"&gt;SSDP&lt;/a&gt; packets
to the TUN interface. So don't get suprised to see some unexpected traffic.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="sending-packets"&gt;
&lt;h3&gt;Sending packets&lt;/h3&gt;
&lt;p&gt;To send raw IP packets we write them to TUN interface:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_9ab1a45893dc453c829b03625a180235-1" name="rest_code_9ab1a45893dc453c829b03625a180235-1" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9ab1a45893dc453c829b03625a180235-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;a id="rest_code_9ab1a45893dc453c829b03625a180235-2" name="rest_code_9ab1a45893dc453c829b03625a180235-2" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9ab1a45893dc453c829b03625a180235-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_9ab1a45893dc453c829b03625a180235-3" name="rest_code_9ab1a45893dc453c829b03625a180235-3" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9ab1a45893dc453c829b03625a180235-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;icmp_req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'E&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\x00\x00\x00\x00&lt;/span&gt;&lt;span class="s1"&gt;@&lt;/span&gt;&lt;span class="se"&gt;\x01&lt;/span&gt;&lt;span class="s1"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\xc2\n\x00\x00\x04\x08\x08&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;\
&lt;a id="rest_code_9ab1a45893dc453c829b03625a180235-4" name="rest_code_9ab1a45893dc453c829b03625a180235-4" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9ab1a45893dc453c829b03625a180235-4"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\x08\x08\x08\x00\x0f\xaa\x00&lt;/span&gt;&lt;span class="s1"&gt;{&lt;/span&gt;&lt;span class="se"&gt;\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class="s1"&gt;test'&lt;/span&gt;
&lt;a id="rest_code_9ab1a45893dc453c829b03625a180235-5" name="rest_code_9ab1a45893dc453c829b03625a180235-5" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#rest_code_9ab1a45893dc453c829b03625a180235-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icmp_req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, we can use &lt;a class="reference external" href="https://github.com/mike01/pypacker"&gt;pypacker&lt;/a&gt; to
construct and parse raw packets.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To use TUN/TAP devices python scripts must be run with root permissions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To forward packets from TUN/TAP to other interfaces (&lt;cite&gt;eth0&lt;/cite&gt;), packet forwarding
must be enabled:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
# iptables -P FORWARD ACCEPT&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To properly route outgoing packets NAT must be enabled:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -j MASQUERADE&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="rubric"&gt;References&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="f1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/tuntap.txt"&gt;https://www.kernel.org/doc/Documentation/networking/tuntap.txt&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.kryo.se/iodine/"&gt;http://code.kryo.se/iodine/&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cs.brown.edu/courses/cs168/s11/handouts/dtun.pdf"&gt;http://cs.brown.edu/courses/cs168/s11/handouts/dtun.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="http://backreference.org/2010/03/26/tuntap-interface-tutorial/"&gt;http://backreference.org/2010/03/26/tuntap-interface-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f5" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#footnote-reference-4"&gt;5&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/montag451/pytun"&gt;https://github.com/montag451/pytun&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="f6" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="http://blog.povilasb.com/posts/linux-virtual-network-devices/#footnote-reference-5"&gt;6&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Gawen/pytun"&gt;https://github.com/Gawen/pytun&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>linux</category><category>networking</category><category>python</category><category>tap</category><category>tun</category><guid>http://blog.povilasb.com/posts/linux-virtual-network-devices/</guid><pubDate>Tue, 22 Aug 2017 18:28:32 GMT</pubDate></item><item><title>systemd: execute bash script on start</title><link>http://blog.povilasb.com/posts/systemd-execute-bash-script-on-start/</link><dc:creator>Povilas Balciunas</dc:creator><description>&lt;p&gt;&lt;cite&gt;systemd&lt;/cite&gt; is a not so new Linux init system. It's default on Debian systems.
This is the very first process to start when Linux boots - it's PID is 1:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.1 139092  6876 ?        Ss   14:03   0:01 /sbin/init

$ file /sbin/init
/sbin/init: symbolic link to /lib/systemd/systemd&lt;/pre&gt;
&lt;p&gt;I've been running systemd for a while.
But thanks to it's System V init script compatibility I've never actually
written any scripts for it.&lt;/p&gt;
&lt;p&gt;I wanted to start a simple bash script after linux booted and I decided it's
time to use systemd to take care of business.&lt;/p&gt;
&lt;section id="unit-file"&gt;
&lt;h2&gt;Unit file&lt;/h2&gt;
&lt;p&gt;Unit files describe the services &lt;cite&gt;systemd&lt;/cite&gt; manages. Very simple unit file
that starts a bash script could be:&lt;/p&gt;
&lt;pre class="literal-block"&gt;[Unit]
Description=Starts some bash script

[Service]
WorkingDirectory=/home/povilas/
Type=forking
ExecStart=/bin/bash my_script.sh
KillMode=process

[Install]
WantedBy=multi-user.target&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;WantedBy&lt;/cite&gt; option in the &lt;cite&gt;Install&lt;/cite&gt; section means that this unit is wanted by
&lt;cite&gt;multi-user.target&lt;/cite&gt; unit. Meaning this unit becomes a dependency of
&lt;cite&gt;multi-user.target&lt;/cite&gt; unit.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="install-unit-file"&gt;
&lt;h2&gt;Install unit file&lt;/h2&gt;
&lt;p&gt;Save the unit file to &lt;cite&gt;/etc/systemd/system/my_unit.service&lt;/cite&gt; and enable it with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# systemctl enable my_unit.service&lt;/pre&gt;
&lt;p&gt;Next time the OS boots, bash script will be executed.&lt;/p&gt;
&lt;/section&gt;</description><category>linux</category><category>systemd</category><guid>http://blog.povilasb.com/posts/systemd-execute-bash-script-on-start/</guid><pubDate>Thu, 10 Aug 2017 11:09:19 GMT</pubDate></item><item><title>SSH Agent Forwarding</title><link>http://blog.povilasb.com/posts/ssh-agent-forwarding/</link><dc:creator>Povilas Balciunas</dc:creator><description>&lt;p&gt;Sometimes I want to use my SSH keys from remote server.
But for security reasons copying SSH keys is a bad idea.
Fortunately there's a better way to do this - ssh-agent daemon.
&lt;cite&gt;ssh-agent&lt;/cite&gt; holds privates keys in memory and allows to authenticate over network.
When I &lt;cite&gt;ssh&lt;/cite&gt; to remote server, I can forward &lt;cite&gt;ssh-agent&lt;/cite&gt; connection.
Thus remote server will be using my local &lt;cite&gt;ssh-agent&lt;/cite&gt; to authenticate connections.&lt;/p&gt;
&lt;p&gt;However, every time I want to forward ssh agent, I can't remember how.&lt;/p&gt;
&lt;p&gt;Actually it's as simple as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;eval `ssh-agent -s`
ssh-add
ssh -A povilas@example.com&lt;/pre&gt;</description><category>linux</category><category>ssh</category><guid>http://blog.povilasb.com/posts/ssh-agent-forwarding/</guid><pubDate>Wed, 07 Jun 2017 19:10:07 GMT</pubDate></item><item><title>Showterm server installation (Debian, Nginx, PostgreSQL)</title><link>http://blog.povilasb.com/posts/showterm-server-installation/</link><dc:creator>Povilas Balciunas</dc:creator><description>&lt;p&gt;Showterm is a set of open source applications for terminal I/O recording and
playback. It consists of client and server applications. Both of them are
hosted on github. You can find easy instructions how to install showterm client
on &lt;a class="reference external" href="http://showterm.io/"&gt;http://showterm.io/&lt;/a&gt;. Unfortunately, there are no instructions how to install
the server software.&lt;/p&gt;
&lt;p&gt;This tutorial demonstrates how to install showterm server on debian systems
running Nginx web server and PostgreSQL database.&lt;/p&gt;
&lt;aside class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I've also successfully tested the server together with MySQL database.&lt;/p&gt;
&lt;/aside&gt;
&lt;section id="about-showterm-server"&gt;
&lt;h2&gt;About Showterm server&lt;/h2&gt;
&lt;p&gt;Showterm server is &lt;a class="reference external" href="http://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; application.
Showterm stores it's "videos" in a database. Specific database might be selected
by editind the &lt;em&gt;database.yml&lt;/em&gt; config file. This should be straighforward for
Ruby on Rails developers. For others like me we'll see later how to do this.&lt;/p&gt;
&lt;iframe width="100%" height="480" src="http://show.povilasb.com/f1cba221048ef40ce8222#fast"&gt;&lt;/iframe&gt;&lt;/section&gt;
&lt;section id="setup-postgresql"&gt;
&lt;h2&gt;Setup PostgreSQL&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Get the necessary Debian packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ sudo apt-get install postgresql-9.1 postgresql-server-dev-9.1&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create PostgreSQL user and database dedicated to showterm server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ su postgres
$ psql
postgres=# create database showterm;
postgres=# create user showterm with password 'showterm';
postgres=# grant all privileges on database "showterm" to showterm;
postgres=# \q&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Above instructions create database "showterm", user "showterm" with password
"showterm".&lt;/p&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p&gt;Update PostgreSQL &lt;a class="reference external" href="http://www.postgresql.org/docs/9.1/static/auth-methods.html"&gt;authentification settings&lt;/a&gt; to allow
Ruby on Rails to connect to &lt;em&gt;showterm&lt;/em&gt; database.
Authetification configs are located in
&lt;em&gt;/etc/postgresql/9.1/main/pg_hba.conf&lt;/em&gt;. Append new entry:&lt;/p&gt;
&lt;pre class="literal-block"&gt;# TYPE  DATABASE        USER       ADDRESS        METHOD
local   showterm        showterm                  md5&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now restart the computer to apply the new settings.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="install-showterm-server"&gt;
&lt;h2&gt;Install Showterm server&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Get necessary Debian packages:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ # Add unstable repo, it has ruby 2.0 packages.
$ sudo echo "deb ftp://ftp.debian.org/debian/ unstable main contrib non-free" /etc/apt/sources.list.d/unstable.list
$ sudo apt-get update
$ sudo apt-get install ruby2.0 ruby2.0-dev gcc libc6-dev nodejs&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;gcc and libc6-dev packages required to build some native ruby packages.&lt;/p&gt;
&lt;ol class="arabic" start="2"&gt;
&lt;li&gt;&lt;p&gt;Get server software from github:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git clone git@github.com:povilasb/showterm.io.git
$ cd showterm.io
$ git checkout debian&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install ruby Gems (this must be run in directory where you cloned Showterm):&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ gem2.0 install bundle
$ bundle install&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup PostgreSQL database &lt;em&gt;showterm&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ rake2.0 db:setup&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the Showterm application:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ rails serve&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now our application runs on port &lt;strong&gt;3000&lt;/strong&gt; by default. Let's configure nginx
to redirect some domain to &lt;em&gt;http://localhost:3000&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="setup-nginx"&gt;
&lt;h2&gt;Setup Nginx&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Get Nginx package:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ sudo apt-get install nginx&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add virtual host for showterm. Create a new virtual host file. E.g.
&lt;em&gt;/etc/nginx/sites-available/show.example.com&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;server
{
        listen 80;
        server_name show.example.com;

        index index.html;
        location / {
                proxy_pass http://localhost:3000;
        }
}&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now enable this virtual host:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ln -s /etc/nginx/sites-available/show.example.com /etc/nginx/sites-enabled/show.example.com&lt;/pre&gt;
&lt;p&gt;Reload Nginx configs:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ nginx -s reload&lt;/pre&gt;
&lt;p&gt;That's it. Now you should be able to open Showterm server application in
your Web browser with &lt;em&gt;http://show.example.com&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="configure-showterm-client"&gt;
&lt;h2&gt;Configure Showterm client&lt;/h2&gt;
&lt;p&gt;By default Showterm client sends it's recorded stream to &lt;a class="reference external" href="http://showterm.io"&gt;http://showterm.io&lt;/a&gt;.
In order to make it send to your own server, simply append a line to
&lt;em&gt;~/.bashrc&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ export SHOWTERM_SERVER=http://show.example.com&lt;/pre&gt;
&lt;p&gt;For this to work you have to restart the terminal.&lt;/p&gt;
&lt;/section&gt;</description><category>li</category><category>linux</category><category>showterm.</category><guid>http://blog.povilasb.com/posts/showterm-server-installation/</guid><pubDate>Mon, 18 Aug 2014 07:35:00 GMT</pubDate></item></channel></rss>